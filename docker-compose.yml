services:
  # Banco de Dados PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: teste_time_register_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teste_time_register_development}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-teste_time_register_development}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  # Redis (para cache e jobs em segundo plano)
  redis:
    image: redis:7-alpine
    container_name: teste_time_register_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Aplicação Rails
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        RAILS_ENV: ${RAILS_ENV:-development}
    container_name: teste_time_register_app
    restart: unless-stopped
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-teste_time_register_development}
      REDIS_URL: redis://redis:6379/0
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: 'true'
      RAILS_SERVE_STATIC_FILES: 'true'
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-2}
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-5}
      PORT: ${PORT:-3000}
    volumes:
      - .:/rails
      - bundle_cache:/usr/local/bundle
      - rails_storage:/rails/storage
      - rails_logs:/rails/log
      - rails_tmp:/rails/tmp
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Worker de Jobs em Segundo Plano (para Solid Queue)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        RAILS_ENV: ${RAILS_ENV:-development}
    container_name: teste_time_register_worker
    restart: unless-stopped
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-teste_time_register_development}
      REDIS_URL: redis://redis:6379/0
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_LOG_TO_STDOUT: 'true'
    volumes:
      - .:/rails
      - bundle_cache:/usr/local/bundle
      - rails_storage:/rails/storage
      - rails_logs:/rails/log
      - rails_tmp:/rails/tmp
    command: ["./bin/rails", "solid_queue:start"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
    name: teste_time_register_network

volumes:
  postgres_data:
    name: teste_time_register_postgres_data
  redis_data:
    name: teste_time_register_redis_data
  bundle_cache:
    name: teste_time_register_bundle_cache
  rails_storage:
    name: teste_time_register_storage
  rails_logs:
    name: teste_time_register_logs
  rails_tmp:
    name: teste_time_register_tmp